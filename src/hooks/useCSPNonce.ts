// src/hooks/useCSPNonce.ts
'use client'

import { useEffect, useState } from 'react'

/**
 * React hook for accessing CSP nonce on the client side
 * This hook provides the nonce that was generated by the middleware
 */

export function useCSPNonce(): string | null {
  const [nonce, setNonce] = useState<string | null>(null)

  useEffect(() => {
    // Get nonce from meta tag (set by middleware)
    const nonceMeta = document.querySelector('meta[name="csp-nonce"]')
    if (nonceMeta) {
      setNonce(nonceMeta.getAttribute('content'))
      return
    }

    // Fallback: try to get from response headers (if available)
    // This is a fallback method and may not work in all cases
    if (typeof window !== 'undefined') {
      // Try to get from a fetch request
      fetch('/api/health/quick', { method: 'HEAD' })
        .then(response => {
          const nonceFromHeader = response.headers.get('x-csp-nonce')
          if (nonceFromHeader) {
            setNonce(nonceFromHeader)
          }
        })
        .catch(() => {
          // Ignore errors, nonce is optional for client-side
        })
    }
  }, [])

  return nonce
}

/**
 * Hook for adding nonce to script tags
 */
export function useScriptNonce(): string | null {
  const nonce = useCSPNonce()
  return nonce
}

/**
 * Hook for adding nonce to style tags
 */
export function useStyleNonce(): string | null {
  const nonce = useCSPNonce()
  return nonce
}

/**
 * Utility function to create a script element with nonce
 */
export function createScriptWithNonce(src: string, nonce: string | null): HTMLScriptElement {
  const script = document.createElement('script')
  script.src = src
  if (nonce) {
    script.setAttribute('nonce', nonce)
  }
  return script
}

/**
 * Utility function to create a style element with nonce
 */
export function createStyleWithNonce(css: string, nonce: string | null): HTMLStyleElement {
  const style = document.createElement('style')
  style.textContent = css
  if (nonce) {
    style.setAttribute('nonce', nonce)
  }
  return style
}
